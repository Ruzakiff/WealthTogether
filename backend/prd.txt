# Project: CFO Command Center for Couples

## Overview
This application is a financial coordination platform for couples, designed to help two partners manage shared goals, track allocations from bank accounts, log financial events, and simulate future savings outcomes. It offers a backend-first, API-driven architecture optimized for mobile app integration, agent-based AI assistants, and long-term extensibility.

The system enables:
- Shared financial goal creation (e.g., Emergency Fund, Japan Trip)
- Tracking money from joint or individual accounts to those goals
- Automatic transaction syncing and AI-powered categorization
- Budget tracking and spending analysis
- A ledger of all financial actions
- Agent-friendly summaries and forecasts
- Optional journaling, sync nudges, emotional reactions, and relationship health tracking
- Lifestyle simulation tools and trust-sensitive privacy modes
- Safe-to-spend comfort zones
- Partner approval flows and automatic allocation rules

---

## Key Entities (Data Models)

### 1. User
Represents an individual person using the app.
- `id`, `email`, `display_name`, `created_at`

### 2. Couple
A relationship container for two users managing shared finances.
- `id`, `partner_1_id`, `partner_2_id`, `created_at`

### 3. BankAccount
Represents a linked or manually created bank account.
- `id`, `user_id`, `plaid_account_id`, `name`, `balance`, `institution_name`, `is_manual`, `created_at`

### 4. FinancialGoal
A virtual bucket representing a savings objective.
- `id`, `couple_id`, `name`, `target_amount`, `type`, `current_allocation`, `priority`, `deadline`, `notes`, `created_at`

### 5. AllocationMap
Tracks how much of each account is allocated to which goal.
- `id`, `goal_id`, `account_id`, `allocated_amount`

### 6. LedgerEvent
Logs all financial transactions and actions.
- `id`, `event_type`, `amount`, `source_account_id`, `dest_goal_id`, `user_id`, `timestamp`, `metadata`

### 7. Transaction
Represents a financial transaction from a connected account.
- `id`, `account_id`, `amount`, `description`, `merchant_name`, `date`, `category_id`, `is_pending`, `plaid_transaction_id`, `created_at`

### 8. Category
Defines transaction categories for classification and budgeting.
- `id`, `name`, `parent_category_id`, `icon`, `created_at`

### 9. Budget
Defines spending limits for specific categories.
- `id`, `couple_id`, `category_id`, `amount`, `period` (monthly, weekly, etc.), `start_date`, `created_at`

### 10. JournalEntry
Records reflections, celebrations, or concerns.
- `id`, `user_id`, `couple_id`, `entry_type` ["reflection", "celebration", "concern"], `content`, `timestamp`

### 11. GoalReaction
Emotional responses to goal progress.
- `id`, `user_id`, `goal_id`, `reaction_type`, `note`, `timestamp`

### 12. SyncPrompt
Scheduled or triggered financial check-ins.
- `id`, `couple_id`, `type` ["monthly_review", "budget_checkin", "goal_rebalance"], `triggered_by`, `message`, `resolved`, `timestamp`

### 13. DriftFlag
Alerts for neglected goals or financial issues.
- `id`, `couple_id`, `goal_id` (optional), `reason`, `triggered_at`, `resolved`

### 14. SpendingComfortProfile
Personalized spending boundaries.
- `id`, `user_id`, `couple_id`, `base_weekly_amount`, `adaptive_mode`, `emotional_floor`, `visibility_to_partner`, `created_at`

### 15. IncomeStream (optional)
Tracks regular income sources.
- `id`, `user_id`, `amount`, `frequency` ["monthly", "biweekly", "irregular"], `source`, `start_date`

### 16. VisibilityScope (optional)
Controls privacy settings for entities.
- `id`, `entity_type` ["goal", "account"], `entity_id`, `visible_to_partner`, `shared_progress_only`

### 17. AutoAllocationRule
Automated fund distribution rules.
- `id`, `user_id`, `source_account_id`, `goal_id`, `percent`, `trigger` ["deposit", "schedule"]

### 18. PendingApproval
Partner approval workflow for financial actions.
- `id`, `couple_id`, `initiated_by`, `action_type`, `payload`, `status` ["pending", "approved", "rejected"], `created_at`

---

## Feature Expansion (First Principles / 4th-Layer-Aware)

### üå± Safe-to-Spend Zones
- Personalized, adaptive spending boundaries with emotional floor protection
- Visualized comfort zones with partner visibility controls

### ‚ù§Ô∏è Relationship Health Tracker
- Sync participation, friction logs, and conflict risk modeling
- AI detects silence and recommends low-friction reconnection

### üìä Lifestyle Simulation
- Role changes: quitting job, moving cities, childcare cost projections
- Timeline & cushion impacts visualized

### ü§ù Couple-as-a-Company Mode
- Contribution ledger, equity drift detector, rebalancing suggestions
- Optional "soft ledger" mode with delayed reconciliation

### üåà Visual Dreamboard + Anchored Goals
- Long-term goals tied to images, GIFs, emotional notes
- GPT reminds users of dream proximity: "2 weeks from your ramen tour üçú"

### üí¨ Budgeting Date Rituals
- Guided session with prompts, charts, emotional check-ins
- Companion animal reacts to tone + nudges next sync

### üõ°Ô∏è Privacy Modes
- Granular sharing preferences per goal/account
- Shared progress vs hidden transaction detail toggle

### üß† GPT Digest & Summaries
- Narrated financial progress via GPT-4o in couple-friendly tone
- Monthly postcard: "Together you saved $1,070 and got 2 weeks closer to Japan üíº‚úàÔ∏è"

### üëç Partner Approval Flows
- Soft-committed changes pending partner confirmation
- Notification and approval UI for major financial decisions

### üîÑ Auto Allocation Rules
- Passive envelope budgeting with percentage-based rules
- Trigger-based allocations (deposits, schedules)

### üéÅ Treat Funds
- Guilt-free "fun" sub-buckets with optional summary exclusion
- Partner-invisible personal spending zones

### üòï "I Feel Off" Button
- Frictionless reflection entry triggers GPT wellness prompt
- Emotional state tracking with financial context

### ‚è±Ô∏è Timeline Feed
- Unified couple activity log across goals, journaling, and reactions
- Shareable milestones and celebration moments

---

## API Overview (Grouped by Functional Area)

### A. Setup & Initialization

#### `POST /users`
- Create a user account.
- Input: `{ email, display_name }`
- Output: `User`

#### `POST /couples`
- Create a couple shared context.
- Input: `{ partner_1_id, partner_2_id }`
- Output: `Couple`

#### `POST /accounts`
- Link manual or Plaid-synced account.
- Input: `{ user_id, name, balance, is_manual, plaid_id? }`
- Output: `BankAccount`

#### `GET /accounts`
- List accounts linked to a user or couple.

### B. Goals & Allocation

#### `POST /goals`
- Create a savings goal.
- Input: `{ couple_id, name, target_amount, type, priority, deadline }`

#### `GET /goals`
- List all goals for the couple with current progress.

#### `PUT /goals/{id}`
- Update goal properties.

#### `POST /goals/allocate`
- Allocate a portion of an account balance to a goal.
- Input: `{ account_id, goal_id, amount }`
- Effect: Updates `AllocationMap`, adjusts `goal.current_allocation`, logs `LedgerEvent`

### C. Ledger & Tracking

#### `POST /ledger/events`
- Log a financial action manually or via business logic.
- Types: ALLOCATION, REALLOCATION, DEPOSIT, SYSTEM, etc.

#### `GET /ledger`
- Retrieve historical ledger events with filters.

### D. AI-Friendly Context & Planning

#### `GET /summary`
- Return system state for a couple: goals, accounts, recent ledger.
- Used for GPT hydration and UI dashboards.

#### `POST /forecast/simulate`
- Simulate how long it will take to complete a goal given a contribution rate.

#### `POST /rebalance/suggest`
- Recommend how to reallocate funds among goals.

#### `POST /rebalance/commit`
- Commit a rebalancing plan and update allocations/ledger.

### E. Transactions & Categorization

#### `POST /plaid/link`
- Generate a Plaid Link token to initiate account linking.
- Output: `{ link_token }`

#### `POST /plaid/exchange`
- Exchange a public token for access tokens and initialize account sync.
- Input: `{ public_token, metadata }`
- Effect: Creates accounts and begins transaction sync

#### `GET /transactions`
- Retrieve transactions with optional filtering by account, date range, category.
- Query params: `account_id?`, `start_date?`, `end_date?`, `category_id?`

#### `POST /transactions/categorize`
- Manually categorize a transaction.
- Input: `{ transaction_id, category_id }`

#### `POST /transactions/sync`
- Manual trigger to sync recent transactions from connected accounts.
- Input: `{ user_id }`

### F. Budgeting & Analysis

#### `POST /budgets`
- Create a budget for a specific category.
- Input: `{ couple_id, category_id, amount, period, start_date }`

#### `GET /budgets`
- Get all budgets for a couple.
- Query params: `couple_id`

#### `GET /budgets/analysis`
- Get analysis of budget performance.
- Query params: `couple_id`, `period?` (current_month, last_month, etc.)

#### `GET /ai/insights`
- Get AI-generated insights about spending patterns and recommendations.
- Query params: `couple_id`, `timeframe?` (last_30_days, last_3_months, etc.)

### G. Emotional Layer

#### `POST /journal`
- Add a reflective entry or note.

#### `GET /journal`
- View journal entries for the couple.

#### `POST /goals/react`
- Emoji/sticker-based feedback on goal progress.

#### `POST /sync/prompts`
- Schedule or trigger a budgeting check-in.

#### `GET /drift`
- Identify goals falling behind and alert users.

#### `POST /journal/concern`
- Log a financial concern or anxiety.

#### `GET /timeline`
- Get unified activity feed across goals, journal entries, and reactions.

#### `GET /timeline/summary`
- Get AI-summarized timeline highlights.

### H. Advanced Controls

#### `GET /comfort_zone`
- Get spending comfort zone information.

#### `POST /allocation_rules`
- Create automatic allocation rules.

#### `GET /allocation_rules`
- List existing allocation rules.

#### `DELETE /allocation_rules/{id}`
- Remove an allocation rule.

#### `POST /approvals`
- Create a pending approval request.

#### `GET /approvals`
- List pending approvals.

#### `POST /visibility_scope`
- Set visibility preferences for an entity.

---

## Backend Design Philosophy
- Declarative, typed models using SQLAlchemy and Pydantic
- Separation between API routers, business logic, and data layer
- All major operations are logged via `LedgerEvent`
- Agent-compatible design: `GET /summary` returns single-call hydration
- Modular goal/account structure supports soft partitioning and rebalancing
- Automatic transaction syncing with minimal user intervention
- AI-powered categorization to reduce manual tagging
- Intelligent budget tracking with predictive capabilities
- Privacy-focused design that keeps financial data secure
 Modular, router-based FastAPI architecture
- Ledger-driven mutation logging for AI traceability
- Agent-first hydration patterns (GET /summary)
- Clear separation between physical (bank) and logical (goal) money
- Emotion-aware schema for relational insights
- Future-compatible: Slack bot, GPT assistant, SwiftUI integration
- Multi-surface sync logic: mobile, voice, chatbot, assistant
- Fully dockerizable, dev/stage/prod-ready

---

## Next Build Milestones

1. **Phase 1** ‚úÖ
   - `POST /users`, `/couples`, `/goals`, `/accounts`
   - `POST /goals/allocate`
   - `GET /goals`, `/accounts`

2. **Phase 2**
   - `/ledger` (create + read)
   - Enforce allocation constraints + traceability

3. **Phase 2.5**
   - Plaid integration for account linking
   - Transaction syncing and storage
   - Basic categorization

4. **Phase 3**
   - `GET /summary`, `/rebalance/suggest`, `/rebalance/commit`, `/forecast/simulate`

5. **Phase 3.5**
   - `POST /budgets`
   - `GET /budgets`, `/budgets/analysis`
   - `GET /ai/insights`
   - `POST /comfort_zone`

6. **Phase 4**
   - Emotional layer: `/journal`, `/goals/react`, `/sync/prompts`, `/drift`
   - GPT digest + timeline aggregation
   - Partner approvals, visibility scope, auto allocation rules
   - "I feel off" flow
   - Treat fund exclusions from summary

---

## Integration Targets
- iOS SwiftUI frontend (OpenAPI-driven)
- GPT agent interfaces via LangChain tools
- REST API for Slack, Discord bots
- Plaid for account/transaction sync
- OpenAI/Claude for categorization and tone-aware summary
- Twilio for reminders and nudges (optional)
- Google Cloud or AWS for deployment + ML pipeline hosting

---

## Vision
This is not just a finance tracker ‚Äî it's a life-aligned, emotional-aware command center to help couples co-pilot their goals, wealth, and relationship health over time.

backend/
‚îú‚îÄ‚îÄ app/                        # Main application package
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ main.py                 # FastAPI application instance and startup
‚îÇ   ‚îú‚îÄ‚îÄ database.py             # Database connection, session management
‚îÇ   ‚îú‚îÄ‚îÄ config.py               # Configuration management (env vars, settings)
‚îÇ   ‚îú‚îÄ‚îÄ models/                 # Database models
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ models.py           # Your existing SQLAlchemy models
‚îÇ   ‚îú‚îÄ‚îÄ schemas/                # Pydantic schemas/models for request/response
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ users.py            # User-related schemas
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ couples.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ goals.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îÇ   ‚îú‚îÄ‚îÄ api/                    # API routers organized by feature
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ v1/                 # Version 1 of your API
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ router.py       # Main router that includes all sub-routers
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ users.py        # User endpoints (your create.py content goes here)
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ couples.py      # Couple endpoints
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ goals.py        # Goal endpoints
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ accounts.py     # Bank account endpoints
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ledger.py       # Ledger endpoints
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îÇ   ‚îú‚îÄ‚îÄ services/               # Business logic layer
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ user_service.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ goal_service.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îÇ   ‚îî‚îÄ‚îÄ core/                   # Core application components
‚îÇ       ‚îú‚îÄ‚îÄ __init__.py
‚îÇ       ‚îú‚îÄ‚îÄ security.py         # Authentication, authorization
‚îÇ       ‚îî‚îÄ‚îÄ exceptions.py       # Custom exceptions
‚îú‚îÄ‚îÄ alembic/                    # Database migrations (optional)
‚îÇ   ‚îú‚îÄ‚îÄ versions/
‚îÇ   ‚îú‚îÄ‚îÄ env.py
‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îú‚îÄ‚îÄ tests/                      # Test directory
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ conftest.py
‚îÇ   ‚îú‚îÄ‚îÄ test_users.py
‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îú‚îÄ‚îÄ .env                        # Environment variables (not in git)
‚îú‚îÄ‚îÄ .env.example                # Example environment variables (in git)
‚îú‚îÄ‚îÄ requirements.txt            # Python dependencies
‚îú‚îÄ‚îÄ Dockerfile                  # For containerization
‚îî‚îÄ‚îÄ README.md                   # Project documentation